<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="b109623b-e62c-41f7-b186-1fa6292f20dc" name="Default" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CoverageDataManager">
    <SUITE FILE_PATH="coverage/Algorithm$ep_01.coverage" NAME="ep_01 Coverage Results" MODIFIED="1567500720303" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/如何使用梯度法和牛顿法实现一个数的平方根" />
    <SUITE FILE_PATH="coverage/Algorithm$ep_02__1_.coverage" NAME="ep_02 (1) Coverage Results" MODIFIED="1561626363808" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/无序链表去重" />
    <SUITE FILE_PATH="coverage/Algorithm$ep_02.coverage" NAME="ep_02 Coverage Results" MODIFIED="1567499646621" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/如何求两个字符串的最长公共子串" />
    <SUITE FILE_PATH="coverage/Algorithm$ep_test__1_.coverage" NAME="ep_test (1) Coverage Results" MODIFIED="1565014393801" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/如何从顶部开始逐层打印二叉树节点数据" />
    <SUITE FILE_PATH="coverage/Algorithm$ep_01__4_.coverage" NAME="ep_01 (4) Coverage Results" MODIFIED="1565348475546" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/如何判断一个数组是否是二元查找树后序遍历的序列" />
    <SUITE FILE_PATH="coverage/Algorithm$ep_01__1_.coverage" NAME="ep_01 (1) Coverage Results" MODIFIED="1567494565974" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/如何进行归并排序" />
    <SUITE FILE_PATH="coverage/Algorithm$test.coverage" NAME="test Coverage Results" MODIFIED="1567495380700" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
    <SUITE FILE_PATH="coverage/Algorithm$ep_01__2_.coverage" NAME="ep_01 (2) Coverage Results" MODIFIED="1567499143765" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/如何求两个字符串的最长公共子串" />
    <SUITE FILE_PATH="coverage/Algorithm$ep_01__3_.coverage" NAME="ep_01 (3) Coverage Results" MODIFIED="1567493839894" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/如何进行快速排序" />
    <SUITE FILE_PATH="coverage/Algorithm$ep_01__5_.coverage" NAME="ep_01 (5) Coverage Results" MODIFIED="1566909933983" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/如何在二叉排序树中找出第一个大于中间值的节点" />
    <SUITE FILE_PATH="coverage/Algorithm$ep_test.coverage" NAME="ep_test Coverage Results" MODIFIED="1564532323131" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/如何把一个有序整数数组放到二叉树中" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>s</find>
    </findStrings>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/链表逆序/ep_02.py" />
        <option value="$PROJECT_DIR$/链表逆序/ep_01.py" />
        <option value="$PROJECT_DIR$/无序链表去重/ep_01.py" />
        <option value="$PROJECT_DIR$/无序链表去重/ep_02.py" />
        <option value="$PROJECT_DIR$/两个单链表求和/ep_01.py" />
        <option value="$PROJECT_DIR$/单链表重新排序/ep_01.py" />
        <option value="$PROJECT_DIR$/找出单链表中的倒数第k个元素/ep_01.py" />
        <option value="$PROJECT_DIR$/找出单链表中的倒数第k个元素/ep_02.py" />
        <option value="$PROJECT_DIR$/如何把链表相邻元素翻转/ep_01.py" />
        <option value="$PROJECT_DIR$/检测单链表是否有环/ep_01.py" />
        <option value="$PROJECT_DIR$/如何把链表以k个结点为一组进行翻转/ep_01.py" />
        <option value="$PROJECT_DIR$/如何合并两个有序链表/ep_01.py" />
        <option value="$PROJECT_DIR$/如何在只给定单链表中某个节点的指针的情况下删除该节点/ep_01.py" />
        <option value="$PROJECT_DIR$/判断两个单链表（无环）是否交叉/ep_01.py" />
        <option value="$PROJECT_DIR$/如何实现栈/ep_01.py" />
        <option value="$PROJECT_DIR$/如何实现栈/ep_02.py" />
        <option value="$PROJECT_DIR$/如何实现队列/ep_02.py" />
        <option value="$PROJECT_DIR$/如何实现队列/ep_01.py" />
        <option value="$PROJECT_DIR$/如何翻转栈内的所有元素/ep_01.py" />
        <option value="$PROJECT_DIR$/如何翻转栈内的所有元素(重点)/ep_01.py" />
        <option value="$PROJECT_DIR$/如何根据入栈序列判断可能的出栈序列/ep_01.py" />
        <option value="$PROJECT_DIR$/如何给栈排序(重点)/ep_01.py" />
        <option value="$PROJECT_DIR$/如何用O(1)的时间复杂度求栈中最小元素/ep_01.py" />
        <option value="$PROJECT_DIR$/如何用两个栈模拟队列操作/ep_01.py" />
        <option value="$PROJECT_DIR$/如何设计一个排序系统/ep_01.py" />
        <option value="$PROJECT_DIR$/如何实现LRU缓存方案/ep_01.py" />
        <option value="$PROJECT_DIR$/如何给定的车票中找出旅程/ep_01.py" />
        <option value="$PROJECT_DIR$/如何从数组中找出满足a+b=c+d的两个数对/ep_01.py" />
        <option value="$PROJECT_DIR$/如何把一个有序整数数组放到二叉树中/ep_01.py" />
        <option value="$PROJECT_DIR$/如何把一个有序整数数组放到二叉树中/ep_test.py" />
        <option value="$PROJECT_DIR$/如何从顶部开始逐层打印二叉树节点数据/ep_test.py" />
        <option value="$PROJECT_DIR$/如何从顶部开始逐层打印二叉树节点数据/ep_01.py" />
        <option value="$PROJECT_DIR$/如何求一棵二叉树的最大子树和/ep_01.py" />
        <option value="$PROJECT_DIR$/如何判断两棵二叉树是否相等/ep_01.py" />
        <option value="$PROJECT_DIR$/如何删除链表中重复的节点/ep_01.py" />
        <option value="$PROJECT_DIR$/如何把二叉树转化为双向链表/ep_01.py" />
        <option value="$PROJECT_DIR$/如何判断一个数组是否是二元查找树后序遍历的序列/ep_01.py" />
        <option value="$PROJECT_DIR$/如何复制二叉树/ep_01.py" />
        <option value="$PROJECT_DIR$/如何对二叉树进行镜像反转/ep_01.py" />
        <option value="$PROJECT_DIR$/如何在二叉排序树中找出第一个大于中间值的节点/ep_01.py" />
        <option value="$PROJECT_DIR$/如何在二叉树中找出与输入整数相等的所有路径/ep_01.py" />
        <option value="$PROJECT_DIR$/如何在二叉树中找出与输入整数相等的所有路径/ep_02.py" />
        <option value="$PROJECT_DIR$/如何使用梯度法和牛顿法实现一个数的平方根/ep_01.py" />
        <option value="$PROJECT_DIR$/如何进行快速排序/ep_01.py" />
        <option value="$PROJECT_DIR$/如何进行归并排序/ep_01.py" />
        <option value="$PROJECT_DIR$/test.py" />
        <option value="$PROJECT_DIR$/如何求两个字符串的最长公共子串/ep_01.py" />
        <option value="$PROJECT_DIR$/如何求两个字符串的最长公共子串/ep_02.py" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="NodePackageJsonFileManager">
    <packageJsonPaths />
  </component>
  <component name="ProjectFrameBounds">
    <option name="y" value="23" />
    <option name="width" value="1440" />
    <option name="height" value="824" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Algorithm" type="b2602c69:ProjectViewProjectNode" />
              <item name="Algorithm" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Algorithm" type="b2602c69:ProjectViewProjectNode" />
              <item name="Algorithm" type="462c0819:PsiDirectoryNode" />
              <item name="如何使用梯度法和牛顿法实现一个数的平方根" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Algorithm" type="b2602c69:ProjectViewProjectNode" />
              <item name="Algorithm" type="462c0819:PsiDirectoryNode" />
              <item name="检测单链表是否有环" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Algorithm" type="b2602c69:ProjectViewProjectNode" />
              <item name="Algorithm" type="462c0819:PsiDirectoryNode" />
              <item name="链表逆序" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SearchEverywhereHistoryKey" value="相等&#9;FILE&#9;file:///Users/Devintern/Documents/Algorithm/如何在二叉树中找出与输入整数相等的所有路径" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="settings.editor.selected.configurable" value="com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/如何求两个字符串的最长公共子串" />
      <recent name="$PROJECT_DIR$" />
      <recent name="$PROJECT_DIR$/如何在二叉树中找出与输入整数相等的所有路径" />
      <recent name="$PROJECT_DIR$/找出单链表中的倒数第k个元素" />
      <recent name="$PROJECT_DIR$/无序链表去重" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Python.ep_01">
    <configuration name="ep_01 (1)" type="PythonConfigurationType" factoryName="Python" temporary="true">
      <module name="Algorithm" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/如何进行归并排序" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/如何进行归并排序/ep_01.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
    </configuration>
    <configuration name="ep_01 (2)" type="PythonConfigurationType" factoryName="Python" temporary="true">
      <module name="Algorithm" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/如何求两个字符串的最长公共子串" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/如何求两个字符串的最长公共子串/ep_01.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
    </configuration>
    <configuration name="ep_01" type="PythonConfigurationType" factoryName="Python" temporary="true">
      <module name="Algorithm" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/如何使用梯度法和牛顿法实现一个数的平方根" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/如何使用梯度法和牛顿法实现一个数的平方根/ep_01.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
    </configuration>
    <configuration name="ep_02" type="PythonConfigurationType" factoryName="Python" temporary="true">
      <module name="Algorithm" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/如何求两个字符串的最长公共子串" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/如何求两个字符串的最长公共子串/ep_02.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
    </configuration>
    <configuration name="test" type="PythonConfigurationType" factoryName="Python" temporary="true">
      <module name="Algorithm" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/test.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
    </configuration>
    <list>
      <item itemvalue="Python.test" />
      <item itemvalue="Python.ep_01 (1)" />
      <item itemvalue="Python.ep_01 (2)" />
      <item itemvalue="Python.ep_02" />
      <item itemvalue="Python.ep_01" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Python.ep_01" />
        <item itemvalue="Python.ep_02" />
        <item itemvalue="Python.ep_01 (2)" />
        <item itemvalue="Python.test" />
        <item itemvalue="Python.ep_01 (1)" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="b109623b-e62c-41f7-b186-1fa6292f20dc" name="Default" comment="" />
      <created>1561439759033</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1561439759033</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="23" width="1440" height="824" extended-state="0" />
    <layout>
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Event Log" order="7" side_tool="true" />
      <window_info anchor="bottom" id="Database Changes" order="7" show_stripe_button="false" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.2002841" />
      <window_info anchor="bottom" id="Version Control" order="7" show_stripe_button="false" />
      <window_info anchor="bottom" id="Python Console" order="7" weight="0.50142044" />
      <window_info anchor="bottom" id="Terminal" order="7" weight="0.32954547" />
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.3383405" />
      <window_info anchor="right" id="R Packages" order="3" />
      <window_info anchor="bottom" id="Docker" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="R Graphics" order="3" />
      <window_info anchor="right" id="Database" order="3" />
      <window_info anchor="right" id="SciView" order="3" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.39772728" />
      <window_info id="Favorites" order="2" side_tool="true" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Find" order="1" />
    </layout>
    <layout-to-restore>
      <window_info anchor="bottom" id="Version Control" order="8" show_stripe_button="false" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="bottom" id="Docker" order="7" show_stripe_button="false" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info id="Favorites" order="2" side_tool="true" />
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.34120172" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="right" id="R Graphics" order="4" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.2911932" />
      <window_info anchor="right" id="R Packages" order="5" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info active="true" anchor="bottom" id="Debug" order="3" visible="true" weight="0.39914772" />
      <window_info anchor="bottom" id="Terminal" order="10" />
      <window_info anchor="bottom" id="Event Log" order="11" side_tool="true" />
      <window_info anchor="bottom" id="Database Changes" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="right" id="SciView" order="3" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="right" id="Database" order="6" />
      <window_info anchor="bottom" id="Python Console" order="12" />
    </layout-to-restore>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/如何判断两棵二叉树是否相等/ep_01.py</url>
          <line>41</line>
          <option name="timeStamp" value="31" />
        </line-breakpoint>
      </breakpoints>
      <default-breakpoints>
        <breakpoint type="python-exception">
          <properties notifyOnTerminate="true" exception="BaseException">
            <option name="notifyOnTerminate" value="true" />
          </properties>
        </breakpoint>
      </default-breakpoints>
      <option name="time" value="64" />
    </breakpoint-manager>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/test.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="408">
          <caret line="24" column="22" selection-start-line="24" selection-start-column="22" selection-end-line="24" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/链表逆序/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="731">
          <caret line="43" column="14" lean-forward="true" selection-start-line="43" selection-start-column="14" selection-end-line="43" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="15" column="16" selection-start-line="15" selection-start-column="12" selection-end-line="15" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/链表逆序/ep_02.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="15" selection-start-line="15" selection-end-line="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/链表逆序/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/无序链表去重/ep_02.py">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/两个单链表求和/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="306">
          <caret line="18" column="18" selection-start-line="18" selection-start-column="18" selection-end-line="18" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/无序链表去重/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/找出单链表中的倒数第k个元素/ep_02.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-368">
          <caret line="22" column="13" selection-start-line="22" selection-start-column="13" selection-end-line="22" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/找出单链表中的倒数第k个元素/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="391">
          <caret line="23" selection-start-line="23" selection-end-line="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/单链表重新排序/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" selection-start-line="7" selection-end-line="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何把链表相邻元素翻转/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="697">
          <caret line="41" selection-start-line="41" selection-end-line="41" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/检测单链表是否有环/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="102">
          <caret line="6" selection-start-line="6" selection-end-line="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何把链表以k个结点为一组进行翻转/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1989">
          <caret line="117" selection-start-line="117" selection-end-line="117" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何合并两个有序链表/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1088">
          <caret line="64" column="9" selection-start-line="64" selection-start-column="9" selection-end-line="64" selection-end-column="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何在只给定单链表中某个节点的指针的情况下删除该节点/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="385">
          <caret line="34" column="16" lean-forward="true" selection-start-line="34" selection-start-column="16" selection-end-line="34" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何实现栈/ep_02.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="510">
          <caret line="30" column="13" selection-start-line="30" selection-start-column="13" selection-end-line="30" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何实现栈/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="578">
          <caret line="34" column="26" selection-start-line="34" selection-start-column="26" selection-end-line="34" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何实现队列/ep_02.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="204">
          <caret line="12" selection-start-line="12" selection-end-line="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何实现队列/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="802">
          <caret line="54" column="22" selection-start-line="54" selection-start-column="22" selection-end-line="54" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/判断两个单链表（无环）是否交叉/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1683">
          <caret line="99" column="28" selection-start-line="99" selection-start-column="28" selection-end-line="99" selection-end-column="28" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何翻转栈内的所有元素(重点)/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-line="5" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何根据入栈序列判断可能的出栈序列/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="9">
          <caret line="52" lean-forward="true" selection-start-line="52" selection-end-line="52" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何给栈排序(重点)/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1020">
          <caret line="60" selection-start-line="60" selection-end-line="60" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何用两个栈模拟队列操作/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="595">
          <caret line="40" column="24" lean-forward="true" selection-start-line="40" selection-start-column="24" selection-end-line="40" selection-end-column="24" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何用O(1)的时间复杂度求栈中最小元素/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="385">
          <caret line="55" column="26" selection-start-line="55" selection-start-column="26" selection-end-line="55" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何设计一个排序系统/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="952">
          <caret line="56" column="24" selection-start-line="56" selection-start-column="24" selection-end-line="56" selection-end-column="24" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何实现LRU缓存方案/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="612">
          <caret line="36" selection-start-line="36" selection-end-line="36" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何给定的车票中找出旅程/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="493">
          <caret line="29" column="40" selection-start-line="29" selection-start-column="40" selection-end-line="29" selection-end-column="40" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何从数组中找出满足a+b=c+d的两个数对/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="391">
          <caret line="23" column="72" selection-start-line="23" selection-start-column="72" selection-end-line="23" selection-end-column="72" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何把一个有序整数数组放到二叉树中/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="340">
          <caret line="20" selection-start-line="20" selection-end-line="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何把一个有序整数数组放到二叉树中/ep_test.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="204">
          <caret line="12" selection-start-line="12" selection-end-line="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何从顶部开始逐层打印二叉树节点数据/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="816">
          <caret line="48" selection-start-line="48" selection-end-line="48" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.virtualenvs/py3_pachong/lib/python3.6/codecs.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="35">
          <caret line="308" selection-start-line="308" selection-end-line="308" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何求一棵二叉树的最大子树和/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="595">
          <caret line="35" column="27" lean-forward="true" selection-start-line="35" selection-start-column="27" selection-end-line="35" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何删除链表中重复的节点/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="70">
          <caret line="5" column="21" selection-start-line="5" selection-start-column="21" selection-end-line="5" selection-end-column="21" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何判断两棵二叉树是否相等/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="313">
          <caret line="39" column="6" selection-start-line="39" selection-start-column="6" selection-end-line="39" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/ep_test.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="354">
          <caret line="41" selection-end-line="48" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何复制二叉树/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="510">
          <caret line="30" selection-start-line="30" selection-end-line="46" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何判断一个数组是否是二元查找树后序遍历的序列/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="51">
          <caret line="3" column="29" selection-start-line="3" selection-start-column="29" selection-end-line="3" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何把二叉树转化为双向链表/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="15" column="17" selection-start-line="15" selection-start-column="17" selection-end-line="15" selection-end-column="17" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何对二叉树进行镜像反转/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="901">
          <caret line="53" column="13" selection-start-line="53" selection-start-column="13" selection-end-line="53" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何在二叉排序树中找出第一个大于中间值的节点/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="833">
          <caret line="49" column="30" selection-start-line="49" selection-start-column="30" selection-end-line="49" selection-end-column="30" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何在二叉树中找出与输入整数相等的所有路径/ep_02.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="221">
          <caret line="13" column="49" selection-start-line="13" selection-start-column="49" selection-end-line="13" selection-end-column="49" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何进行快速排序/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="32">
          <caret line="10" column="20" selection-start-line="10" selection-start-column="20" selection-end-line="10" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何使用梯度法和牛顿法实现一个数的平方根/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="15" column="52" selection-start-line="15" selection-start-column="52" selection-end-line="15" selection-end-column="52" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何在二叉树中找出与输入整数相等的所有路径/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="482">
          <caret line="41" column="18" selection-start-line="41" selection-start-column="18" selection-end-line="41" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何进行归并排序/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="527">
          <caret line="31" selection-start-line="31" selection-end-line="36" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何求两个字符串的最长公共子串/ep_02.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="442">
          <caret line="26" selection-start-line="26" selection-end-line="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/如何求两个字符串的最长公共子串/ep_01.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="68">
          <caret line="4" lean-forward="true" selection-start-line="4" selection-end-line="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test.py">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="442">
          <caret line="26" lean-forward="true" selection-start-line="26" selection-end-line="26" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ScopeChooserConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>